@startuml
' data_processors.puml - 数据处理器与转换器
package "数据处理层 (data)" {
    package "数据处理器 (processors)" {
        class SensorGroupAggregator {
            +process_stages_yaml: str
            +process_id: str
            +_load_sensor_groups_from_process(process_id: str): List[Dict[str, Any]]
            +_auto_detect_sensor_groups(data: Dict[str, List[float]]): List[Dict[str, Any]]
            +process(data: Dict[str, Any], **kwargs: Any): Dict[str, Any]
            +run(**kwargs: Any): Any
        }
        class DataValidator {
            +required_fields: List[str]
            +data_types: Dict[str, type]
            +value_ranges: Dict[str, Tuple[float, float]]
            +validate(data: Any): bool
            +process(data: Dict[str, Any], **kwargs: Any): Dict[str, Any]
            +run(**kwargs: Any): Any
        }
        class DataProcessorFactory {
            +_processors: Dict[str, Type[BaseProcessor]]
            +{static} create_processor(processor_type: str, **kwargs: Any): BaseProcessor
            +{static} register_processor(processor_type: str, processor_class: Type[BaseProcessor]): void
            +{static} get_supported_types(): list
        }
    }
    package "数据转换器 (transformers)" {
        class SensorGroupTransformer {
            +transform_type: str
            +process(data: Dict[str, Any], **kwargs: Any): Dict[str, Any]
            +_vector_to_matrix(data: Dict[str, Any]): Dict[str, Any]
            +run(**kwargs: Any): Any
        }
        class DataTransformerFactory {
            +_transformers: Dict[str, Type[BaseProcessor]]
            +{static} create_transformer(transformer_type: str, **kwargs: Any): BaseProcessor
            +{static} register_transformer(transformer_type: str, transformer_class: Type[BaseProcessor]): void
            +{static} get_supported_types(): list
        }
    }
}

' 继承
SensorGroupAggregator --|> BaseProcessor
DataValidator --|> BaseProcessor
SensorGroupTransformer --|> BaseProcessor

' 接口实现
SensorGroupAggregator ..|> IDataProcessor
DataValidator ..|> IDataProcessor

' 工厂
DataProcessorFactory ..> SensorGroupAggregator : creates
DataProcessorFactory ..> DataValidator : creates
DataTransformerFactory ..> SensorGroupTransformer : creates

' 异常
SensorGroupAggregator ..> DataProcessingError : throws
DataValidator ..> ValidationError : throws

' 依赖
SensorGroupAggregator --> DataUtils
DataValidator --> DataUtils

@enduml