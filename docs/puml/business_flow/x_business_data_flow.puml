@startuml 业务流和数据流图
!theme plain
skinparam activity {
    BackgroundColor #E1F5FE
    BorderColor #0277BD
    FontColor #000000
}
skinparam activityDiamond {
    BackgroundColor #FFF3E0
    BorderColor #F57C00
}
skinparam note {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
}
skinparam database {
    BackgroundColor #E8F5E8
    BorderColor #388E3C
}

title OPLib 系统业务流和数据流图

start

:系统启动;
note right: 加载配置文件\n- workflow_curing_history.yaml\n- operators.yaml\n- rules.yaml\n- process_stages.yaml

:初始化工作流构建器;
note right: WorkflowBuilder 初始化\n- 配置加载器\n- 算子索引\n- 规则索引

:构建工作流DAG;
note right: 解析工作流配置\n- 收集节点\n- 构建依赖图\n- 拓扑排序

:创建工作流执行器;
note right: WorkflowExecutor 初始化\n- Prefect 客户端\n- 监控配置

partition "数据输入阶段" {
    :读取传感器数据;
    note right: CSVReader/JSONReader\n- 读取原始传感器数据\n- 数据清洗和验证\n- 类型转换
    
    database "原始传感器数据" as raw_data {
        [PTC10, PTC11, PTC12...] : 温度传感器
        [PRESS] : 压力传感器
        [timestamp] : 时间戳
    }
    
    :数据验证;
    note right: DataValidator\n- 验证数据结构\n- 检查数据类型\n- 验证数值范围
}

partition "数据处理阶段" {
    :传感器组聚合;
    note right: SensorGroupAggregator\n- 自动识别PTC*列\n- 按组聚合传感器数据\n- 生成temperature_group
    
    database "聚合后数据" as aggregated_data {
        [temperature_group] : 温度传感器矩阵
        [pressure] : 压力数据
        [original_data] : 原始数据备份
    }
    
    :数据转换;
    note right: SensorGroupTransformer\n- 矩阵数据展平\n- 数据格式标准化
}

partition "分析处理阶段" {
    :过程阶段检测;
    note right: StageDetector\n- 基于规则检测工艺阶段\n- 支持heating/soaking/cooling\n- 传感器级别阶段分析
    
    database "阶段化数据" as staged_data {
        [stage_detection] : 阶段检测结果
        [sensor_data] : 传感器级别数据
        [stages_config] : 阶段配置
    }
    
    :规则评估;
    note right: RuleEvaluator\n- 执行业务规则\n- 支持分阶段规则\n- 规则引擎评估
    
    database "规则结果" as rule_results {
        [stage_results] : 分阶段规则结果
        [rule_summary] : 规则汇总
    }
    
    :SPC控制图分析;
    note right: SPCControlChart\n- 统计过程控制\n- 3-sigma控制限\n- 异常检测
    
    database "SPC分析结果" as spc_results {
        [mean, std] : 统计量
        [ucl, lcl] : 控制限
        [out_of_control] : 异常标记
    }
}

partition "报告生成阶段" {
    :生成分析报告;
    note right: ReportGenerator\n- 整合所有分析结果\n- 生成结构化报告\n- 支持多种格式
    
    database "分析报告" as analysis_report {
        [stage_rules] : 阶段规则结果
        [spc] : SPC分析结果
        [rule_summary] : 规则汇总
    }
    
    :写入报告文件;
    note right: FileWriter\n- 支持JSON格式\n- 自动创建目录\n- 文件路径管理
    
    database "输出文件" as output_file {
        [quality-reports.json] : 质量报告文件
        [timestamp] : 时间戳标识
    }
}

:返回执行结果;
note right: 返回结果路径\n- 成功/失败状态\n- 执行时间\n- 错误信息

stop

' 数据流关系
raw_data --> aggregated_data : 传感器组聚合
aggregated_data --> staged_data : 阶段检测
staged_data --> rule_results : 规则评估
aggregated_data --> spc_results : SPC分析
rule_results --> analysis_report : 报告生成
spc_results --> analysis_report : 报告生成
analysis_report --> output_file : 文件写入

' 业务流控制
note over raw_data, output_file
**数据流特点:**
- 原始数据 → 聚合数据 → 阶段化数据
- 并行处理：规则评估 + SPC分析
- 结果整合：生成统一报告
- 文件输出：支持时间戳隔离
end note

note over :系统启动, :返回执行结果
**业务流程特点:**
- 配置驱动：YAML文件定义工作流
- 模块化设计：每个阶段独立处理
- 错误处理：完整的异常体系
- 监控能力：执行时间和状态跟踪
- 可扩展性：支持新算子和规则
end note

@enduml
