#!/usr/bin/env python3
"""测试修正后的规则合规性检查逻辑。"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.config.manager import ConfigManager
from src.workflow.builder import WorkflowBuilder
from src.analysis.analyzers.rule_engine_analyzer import RuleEngineAnalyzer

def test_rule_compliance_with_stage_and_sensors():
    """测试基于阶段和传感器组的规则合规性检查。"""
    print("=== 测试修正后的规则合规性检查逻辑 ===")
    
    # 初始化配置管理器
    config_manager = ConfigManager()
    
    # 创建规则引擎分析器
    analyzer = RuleEngineAnalyzer(
        algorithm="compliance_checker",
        rule_config="config/process_rules.yaml",
        spec_config="config/process_specification.yaml",
        calculation_config="config/calculation_definitions.yaml"
    )
    
    # 模拟阶段检测结果
    stage_data = {
        "data": {
            "pre_heating": {
                "start_time": 0,
                "end_time": 100,
                "time_range": {"start": 0, "end": 100}
            },
            "heating_phase_1": {
                "start_time": 100,
                "end_time": 200,
                "time_range": {"start": 100, "end": 200}
            },
            "soaking": {
                "start_time": 300,
                "end_time": 600,
                "time_range": {"start": 300, "end": 600}
            }
        },
        "metadata": {
            "total_stages": 3,
            "detection_algorithm": "rule_based"
        }
    }
    
    # 模拟传感器分组结果
    sensor_data = {
        "data": {
            "thermocouples": [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500],
            "leading_thermocouples": [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500],
            "lagging_thermocouples": [18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78, 83, 88, 93, 98, 103, 108, 113, 118, 123, 128, 133, 138, 143, 148, 153, 158, 163, 168, 173, 178, 183, 188, 193, 198, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373, 378, 383, 388, 393, 398, 403, 408, 413, 418, 423, 428, 433, 438, 443, 448, 453, 458, 463, 468, 473, 478, 483, 488, 493, 498],
            "pressure_sensors": [600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725, 730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780, 785, 790, 795, 800, 805, 810, 815, 820, 825, 830, 835, 840, 845, 850, 855, 860, 865, 870, 875, 880, 885, 890, 895, 900, 905, 910, 915, 920, 925, 930, 935, 940, 945, 950, 955, 960, 965, 970, 975, 980, 985, 990, 995, 1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040, 1045, 1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095, 1100],
            "vacuum_sensors": [10, 12, 15, 18, 20, 22, 25, 28, 30, 32, 35, 38, 40, 42, 45, 48, 50, 52, 55, 58, 60, 62, 65, 68, 70, 72, 75, 78, 80, 82, 85, 88, 90, 92, 95, 98, 100, 102, 105, 108, 110, 112, 115, 118, 120, 122, 125, 128, 130, 132, 135, 138, 140, 142, 145, 148, 150, 152, 155, 158, 160, 162, 165, 168, 170, 172, 175, 178, 180, 182, 185, 188, 190, 192, 195, 198, 200, 202, 205, 208, 210, 212, 215, 218, 220, 222, 225, 228, 230, 232, 235, 238, 240, 242, 245, 248, 250]
        },
        "metadata": {
            "grouping_algorithm": "hierarchical_clustering",
            "raw_data": {
                "PTC10": [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500],
                "PTC11": [18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78, 83, 88, 93, 98, 103, 108, 113, 118, 123, 128, 133, 138, 143, 148, 153, 158, 163, 168, 173, 178, 183, 188, 193, 198, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373, 378, 383, 388, 393, 398, 403, 408, 413, 418, 423, 428, 433, 438, 443, 448, 453, 458, 463, 468, 473, 478, 483, 488, 493, 498],
                "PRESS": [600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725, 730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780, 785, 790, 795, 800, 805, 810, 815, 820, 825, 830, 835, 840, 845, 850, 855, 860, 865, 870, 875, 880, 885, 890, 895, 900, 905, 910, 915, 920, 925, 930, 935, 940, 945, 950, 955, 960, 965, 970, 975, 980, 985, 990, 995, 1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040, 1045, 1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095, 1100],
                "VPRB1": [10, 12, 15, 18, 20, 22, 25, 28, 30, 32, 35, 38, 40, 42, 45, 48, 50, 52, 55, 58, 60, 62, 65, 68, 70, 72, 75, 78, 80, 82, 85, 88, 90, 92, 95, 98, 100, 102, 105, 108, 110, 112, 115, 118, 120, 122, 125, 128, 130, 132, 135, 138, 140, 142, 145, 148, 150, 152, 155, 158, 160, 162, 165, 168, 170, 172, 175, 178, 180, 182, 185, 188, 190, 192, 195, 198, 200, 202, 205, 208, 210, 212, 215, 218, 220, 222, 225, 228, 230, 232, 235, 238, 240, 242, 245, 248, 250]
            }
        }
    }
    
    # 模拟多依赖输入数据
    multi_dependency_data = {
        "stage_detection": stage_data,
        "sensor_grouping": sensor_data
    }
    
    # 加载规则和规格配置
    rules_config = config_manager.get_rules_config()
    spec_config = config_manager.get_specification_config()
    
    # 设置分析器的规则索引和规格索引
    analyzer.rules_index = {r["id"]: r for r in rules_config.get("rules", [])}
    analyzer.spec_index = {spec["name"]: spec for spec in spec_config.get("specifications", [])}
    
    print(f"加载的规则数量: {len(analyzer.rules_index)}")
    print(f"加载的规格数量: {len(analyzer.spec_index)}")
    
    # 执行规则分析
    try:
        result = analyzer.analyze(multi_dependency_data)
        
        print("\n=== 规则分析结果 ===")
        print(f"检查的规则数量: {result['analysis_info']['rules_checked']}")
        print(f"通过的规则数量: {result['analysis_info']['passed_rules']}")
        print(f"失败的规则数量: {result['analysis_info']['failed_rules']}")
        
        print("\n=== 详细规则结果 ===")
        for rule_id, rule_result in result['rule_results'].items():
            status = "✓ 通过" if rule_result['passed'] else "✗ 失败"
            print(f"{rule_id}: {status}")
            print(f"  规则名称: {rule_result['rule_name']}")
            print(f"  实际值: {rule_result['actual_value']}")
            print(f"  阈值: {rule_result['threshold']}")
            print(f"  消息: {rule_result['message']}")
            print(f"  严重程度: {rule_result['severity']}")
            if 'stage' in rule_result and rule_result['stage']:
                print(f"  适用阶段: {rule_result['stage']}")
            print()
        
        return True
        
    except Exception as e:
        print(f"规则分析失败: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_rule_compliance_with_stage_and_sensors()
    if success:
        print("✓ 测试通过：规则合规性检查逻辑修正成功")
    else:
        print("✗ 测试失败：规则合规性检查逻辑存在问题")
